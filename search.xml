<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2018%2F07%2F13%2FMarkdown%E6%A0%B7%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[Cmd Markdown 使用说明标签（空格分隔）： Markdown title: Cmd Markdown 使用说明date: 2018-6-29 19:37:56categories:tags: Markdown 欢迎使用 Cmd Markdown 编辑阅读器 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 『Cmd 技术渲染的沙箱页面，点击此处编写自己的文档』 Cmd Markdown 简明语法手册 0. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 1. 斜体和粗体使用 * 和 ** 表示斜体和粗体。 示例： 这是 斜体，这是 粗体。 2. 分级标题使用 === 表示一级标题，使用 — 表示二级标题。 示例： 1234567这是一个一级标题============================这是一个二级标题--------------------------------------------------### 这是一个三级标题 3. 外链接使用 [描述](链接地址) 为文字增加外链接。 示例： 这是去往 本人博客 的链接。 4. 无序列表使用 *，+，- 表示无序列表。 示例： 无序列表项 一 无序列表项 二 无序列表项 三 5. 有序列表使用数字和点表示有序列表。 示例： 有序列表项 一 有序列表项 二 有序列表项 三 6. 文字引用使用 &gt; 表示文字引用。 示例： 野火烧不尽，春风吹又生。 7. 行内代码块使用 `代码` 表示行内代码块。 示例： 让我们聊聊 html。 8. 代码块使用 四个缩进空格 表示代码块。 示例： 这是一个代码块，此行左侧有四个不可见的空格。 9. 插入图像使用 ![描述](图片链接地址) 插入图像。 示例： Cmd Markdown 高阶语法手册1. 标签分类在编辑区任意行的列首位置输入以下代码给文稿标签： 标签： 数学 英语 Markdown 或者 Tags： 数学 英语 Markdown 2. 删除线使用 ~~ 表示删除线。 这是一段错误的文本。 3. 加强的代码块支持四十一种编程语言的语法高亮的显示，行号显示。 非代码示例： 1$ sudo apt-get install vim-gnome Python 示例： 123456789101112@requires_authorizationdef somefunc(param1='', param2=0): '''A docstring''' if param1 &gt; param2: # interesting print 'Greater' return (param2 - param1 + 1) or Noneclass SomeClass: pass&gt;&gt;&gt; message = '''interpreter... prompt''' JavaScript 示例： 1234567891011121314151617/*** nth element in the fibonacci series.* @param n &gt;= 0* @return the nth element, &gt;= 0.*/function fib(n) &#123; var a = 1, b = 1; var tmp; while (--n &gt;= 0) &#123; tmp = a; a += b; b = tmp; &#125; return a;&#125;document.write(fib(10)); 4. 表格支持 项目 价格 数量 计算机 \$1600 5 手机 \$12 12 管线 \$1 234 5. Html 标签本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格： &lt;table&gt; &lt;tr&gt; &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt; &lt;th&gt;星期一&lt;/th&gt; &lt;th&gt;星期二&lt;/th&gt; &lt;th&gt;星期三&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;李强&lt;/td&gt; &lt;td&gt;张明&lt;/td&gt; &lt;td&gt;王平&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; 值班人员 星期一 星期二 星期三 李强 张明 王平 6. 待办事宜 Todo 列表使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如： - [ ] **Cmd Markdown 开发** - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 - [ ] 支持以 PDF 格式导出文稿 - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments) - [x] 改进 LaTex 功能 - [x] 修复 LaTex 公式渲染问题 - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers) - [ ] **七月旅行准备** - [ ] 准备邮轮上需要携带的物品 - [ ] 浏览日本免税店的物品 - [x] 购买蓝宝石公主号七月一日的船票 对应显示如下待办事宜 Todo 列表： Cmd Markdown 开发 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 支持以 PDF 格式导出文稿 新增Todo列表功能 语法参考 改进 LaTex 功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 语法参考 七月旅行准备 准备邮轮上需要携带的物品 浏览日本免税店的物品 购买蓝宝石公主号七月一日的船票 作者 [@ghosert][3]2016 年 07月 07日]]></content>
  </entry>
  <entry>
    <title><![CDATA[Cmd Markdown 使用说明]]></title>
    <url>%2F2018%2F06%2F29%2FCmd%20Markdown%20%E7%BC%96%E8%BE%91%E9%98%85%E8%AF%BB%E5%99%A8%2F</url>
    <content type="text"><![CDATA[欢迎使用 Cmd Markdown 编辑阅读器 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 支持以 PDF 格式导出文稿 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 新增 Todo 列表功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 2. 高亮一段代码1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 3. 绘制表格 项目 价格 数量 计算机 \$1600 5 手机 \$12 12 管线 \$1 234 4. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 『Cmd 技术渲染的沙箱页面，点击此处编写自己的文档』 Cmd Markdown 简明语法手册 1. 斜体和粗体使用 * 和 ** 表示斜体和粗体。 示例： 这是 斜体，这是 粗体。 2. 分级标题使用 === 表示一级标题，使用 — 表示二级标题。 示例： 1234567这是一个一级标题============================这是一个二级标题--------------------------------------------------### 这是一个三级标题 3. 外链接使用 [描述](链接地址) 为文字增加外链接。 示例： 这是去往 本人博客 的链接。 4. 无序列表使用 *，+，- 表示无序列表。 示例： 无序列表项 一 无序列表项 二 无序列表项 三 5. 有序列表使用数字和点表示有序列表。 示例： 有序列表项 一 有序列表项 二 有序列表项 三 6. 文字引用使用 &gt; 表示文字引用。 示例： 野火烧不尽，春风吹又生。 7. 行内代码块使用 `代码` 表示行内代码块。 示例： 让我们聊聊 html。 8. 代码块使用 四个缩进空格 表示代码块。 示例： 这是一个代码块，此行左侧有四个不可见的空格。 9. 插入图像使用 ![描述](图片链接地址) 插入图像。 示例： Cmd Markdown 高阶语法手册1. 标签分类在编辑区任意行的列首位置输入以下代码给文稿标签： 标签： 数学 英语 Markdown 或者 Tags： 数学 英语 Markdown 2. 删除线使用 ~~ 表示删除线。 这是一段错误的文本。 3. 加强的代码块支持四十一种编程语言的语法高亮的显示，行号显示。 非代码示例： 1$ sudo apt-get install vim-gnome Python 示例： 123456789101112@requires_authorizationdef somefunc(param1='', param2=0): '''A docstring''' if param1 &gt; param2: # interesting print 'Greater' return (param2 - param1 + 1) or Noneclass SomeClass: pass&gt;&gt;&gt; message = '''interpreter... prompt''' JavaScript 示例： 1234567891011121314151617/*** nth element in the fibonacci series.* @param n &gt;= 0* @return the nth element, &gt;= 0.*/function fib(n) &#123; var a = 1, b = 1; var tmp; while (--n &gt;= 0) &#123; tmp = a; a += b; b = tmp; &#125; return a;&#125;document.write(fib(10)); 4. 表格支持 项目 价格 数量 计算机 \$1600 5 手机 \$12 12 管线 \$1 234 5. Html 标签本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格： &lt;table&gt; &lt;tr&gt; &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt; &lt;th&gt;星期一&lt;/th&gt; &lt;th&gt;星期二&lt;/th&gt; &lt;th&gt;星期三&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;李强&lt;/td&gt; &lt;td&gt;张明&lt;/td&gt; &lt;td&gt;王平&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; 值班人员 星期一 星期二 星期三 李强 张明 王平 16. 待办事宜 Todo 列表使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如： - [ ] **Cmd Markdown 开发** - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 - [ ] 支持以 PDF 格式导出文稿 - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments) - [x] 改进 LaTex 功能 - [x] 修复 LaTex 公式渲染问题 - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers) - [ ] **七月旅行准备** - [ ] 准备邮轮上需要携带的物品 - [ ] 浏览日本免税店的物品 - [x] 购买蓝宝石公主号七月一日的船票 对应显示如下待办事宜 Todo 列表： Cmd Markdown 开发 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 支持以 PDF 格式导出文稿 新增Todo列表功能 语法参考 改进 LaTex 功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 语法参考 七月旅行准备 准备邮轮上需要携带的物品 浏览日本免税店的物品 购买蓝宝石公主号七月一日的船票 作者 [@ghosert][3]2016 年 07月 07日]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[核心命令]]></title>
    <url>%2F2018%2F05%2F11%2F%E6%A0%B8%E5%BF%83%E5%91%BD%E4%BB%A4(%E5%AF%86%E7%A0%81)%2F</url>
    <content type="text"><![CDATA[加密文章访问 具体实现方法打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件,在以下位置插入这样一段代码：12345678910&lt;script&gt; (function()&#123; if('&#123;&#123; page.password &#125;&#125;')&#123; if (prompt('请输入文章密码') !== '&#123;&#123; page.password &#125;&#125;')&#123; alert('密码错误！'); history.back(); &#125; &#125; &#125;)();&lt;/script&gt; 然后在文章上写成类似这样： Hexo 本地测试1hexo s -p 8088 Hexo 上传仓库1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d]]></content>
      <categories>
        <category>Lock</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDEA基于maven项目使用mybatis-generator自动生成代码(实例)]]></title>
    <url>%2F2018%2F05%2F11%2Fmybatis-generator%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[一、项目结构（前） 二、数据库123456789101112131415161718SET FOREIGN_KEY_CHECKS=0; -- ---------------------------- -- Table structure for `admin` -- ---------------------------- DROP TABLE IF EXISTS `admin`; CREATE TABLE `admin` ( `Id` int(11) NOT NULL auto_increment, `username` varchar(20) default NULL, `password` varchar(20) default NULL, `name` varchar(20) default NULL, PRIMARY KEY (`Id`) ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8; -- ---------------------------- -- Records of admin -- ---------------------------- INSERT INTO `admin` VALUES ('1', 'admin', 'admin', '超级管理员'); 三、IDEA创建Maven项目Maven创建Java Web项目过程步骤可以看上面的博文，里面介绍得很详细。 四、基于此SSM框架实现SSM框架整合 + Druid数据源 + log4j2 (一)过程步骤可以看上面的博文，里面介绍得很详细。本项目中稍微有点小改动–&gt;resources增加mybatis文件夹管理jdbc.properties和mybatis-config.xml 五、配置pom.xmllt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.ray&lt;/groupId&gt; &lt;artifactId&gt;ssm01&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;name&gt;ssm01 Maven Webapp&lt;/name&gt; &lt;!-- FIXME change it to the project's website --&gt; &lt;url&gt;http://www.example.com&lt;/url&gt; &lt;properties&gt; &lt;mysql.version&gt;5.1.18&lt;/mysql.version&gt; &lt;com.alibaba.druid.version&gt;1.1.9&lt;/com.alibaba.druid.version&gt; &lt;com.mybatis.mybatis.version&gt;3.4.1&lt;/com.mybatis.mybatis.version&gt; &lt;com.mybatis.mybatis_spring.version&gt;1.3.0&lt;/com.mybatis.mybatis_spring.version&gt; &lt;org.mybatis.generator.version&gt;1.3.5&lt;/org.mybatis.generator.version&gt; &lt;com.google.gson.version&gt;2.7&lt;/com.google.gson.version&gt; &lt;javax.servlet.version&gt;3.1.0&lt;/javax.servlet.version&gt; &lt;org.springframework.version&gt;4.3.2.RELEASE&lt;/org.springframework.version&gt; &lt;com.dyuproject.protostuff.version&gt;1.0.8&lt;/com.dyuproject.protostuff.version&gt; &lt;developer.organization&gt;&lt;![CDATA[scengine]]&gt;&lt;/developer.organization&gt; &lt;/properties&gt; &lt;dependencies&gt;&lt;!-- 远程依赖库 --&gt; &lt;!--mybatis-generator--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt; &lt;version&gt;1.3.5&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 0.测试单元 --&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 1.数据库 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;!--druid==&gt;阿里巴巴数据库连接池--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;$&#123;com.alibaba.druid.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- DAO: MyBatis --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;com.mybatis.mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;$&#123;com.mybatis.mybatis_spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 2.Servlet web --&gt; &lt;dependency&gt; &lt;groupId&gt;taglibs&lt;/groupId&gt; &lt;artifactId&gt;standard&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt; &lt;artifactId&gt;gson&lt;/artifactId&gt; &lt;version&gt;$&#123;com.google.gson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--Servlet版本设置--&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;$&#123;javax.servlet.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 3.Spring --&gt; &lt;!-- 1)Spring核心 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 2)Spring DAO层 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 3)Spring web --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 4)Spring test --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt; &lt;artifactId&gt;protostuff-core&lt;/artifactId&gt; &lt;version&gt;$&#123;com.dyuproject.protostuff.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt; &lt;artifactId&gt;protostuff-runtime&lt;/artifactId&gt; &lt;version&gt;$&#123;com.dyuproject.protostuff.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Map工具类 --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-collections&lt;/groupId&gt; &lt;artifactId&gt;commons-collections&lt;/artifactId&gt; &lt;version&gt;3.2.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 文件上传工具 --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-io&lt;/groupId&gt; &lt;artifactId&gt;commons-io&lt;/artifactId&gt; &lt;version&gt;2.5&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 日志文件log4j2 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-core&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-api&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-web&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;ssm01&lt;/finalName&gt; &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt; &lt;plugins&gt; &lt;!-- mybatis-generator --&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;org.mybatis.generator.version&#125;&lt;/version&gt; &lt;configuration&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;/configuration&gt; &lt;!-- 用maven mybatis插件 如果不在plugin里面添加依赖包得引用的话，会找不到相关得jar包， 在plugin外部得jar包，他不会去找到并执行， 所以要把plugin运行依赖得jar配置都放在里面 --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;com.mybatis.mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/plugin&gt; &lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.7.0&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.20.1&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt; &lt;version&gt;3.2.0&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt; &lt;version&gt;2.5.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;/build&gt; &lt;/project&gt; 六、配置generatorConfig.xml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt; &lt;!-- 配置生成器 --&gt; &lt;generatorConfiguration&gt; &lt;!-- 加载JDBC配置文件 --&gt; &lt;properties resource="mybatis/jdbc.properties"/&gt; &lt;!-- context：生成一组对象的环境 --&gt; &lt;context id="MyBatis" targetRuntime="MyBatis3" defaultModelType="flat"&gt; &lt;!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； --&gt; &lt;property name="beginningDelimiter" value="`"/&gt; &lt;property name="endingDelimiter" value="`"/&gt; &lt;!-- 不生成注解 --&gt; &lt;commentGenerator&gt; &lt;!-- 这个元素用来去除指定生成的注释中是否包含生成的日期 false:表示保护 --&gt; &lt;!-- 如果生成日期，会造成即使修改一个字段，整个实体类所有属性都会发生变化，不利于版本控制，所以设置为true --&gt; &lt;property name="suppressDate" value="true" /&gt; &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt; &lt;!--&lt;property name="suppressAllComments" value="true" /&gt;--&gt; &lt;/commentGenerator&gt; &lt;!--数据库链接URL，用户名、密码 --&gt; &lt;jdbcConnection driverClass="$&#123;jdbc.driver&#125;" connectionURL="$&#123;jdbc.url&#125;" userId="$&#123;jdbc.username&#125;" password="$&#123;jdbc.password&#125;"&gt; &lt;/jdbcConnection&gt; &lt;!-- java类型处理器 --&gt; &lt;!--&lt;javaTypeResolver&gt;--&gt; &lt;!-- This property is used to specify whether MyBatis Generator should force the use of java.math.BigDecimal for DECIMAL and NUMERIC fields, --&gt; &lt;!--&lt;property name="forceBigDecimals" value="false" /&gt;--&gt; &lt;!--&lt;/javaTypeResolver&gt;--&gt; &lt;!-- java模型创建器 targetPackage：生成的类要放的包 targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中 --&gt; &lt;!-- 生成模型的包名和位置 文件夹自己定义 --&gt; &lt;javaModelGenerator targetPackage="com.ray.entity" targetProject="src/main/java"&gt; &lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false --&gt; &lt;property name="enableSubPackages" value="true" /&gt; &lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt; &lt;property name="trimStrings" value="true" /&gt; &lt;/javaModelGenerator&gt; &lt;!-- 生成映射文件的包名和位置 文件夹自己定义--&gt; &lt;sqlMapGenerator targetPackage="mapping" targetProject="src/main/resources"&gt; &lt;property name="enableSubPackages" value="true" /&gt; &lt;/sqlMapGenerator&gt; &lt;!-- 生成DAO的包名和位置 文件夹自己定义--&gt; &lt;javaClientGenerator type="XMLMAPPER" targetPackage="com.ray.dao" targetProject="src/main/java"&gt; &lt;property name="enableSubPackages" value="true" /&gt; &lt;/javaClientGenerator&gt; &lt;!-- 要生成哪些表 , %表示生成全部的表--&gt; &lt;table tableName="%" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"&gt;&lt;/table&gt; &lt;/context&gt; &lt;/generatorConfiguration&gt; 七、执行生成代码1、点击run-&gt;Edit configurations,如图：2、之后弹出运行配置框，为当前配置配置一个名称，这里其名为”generator”,然后在 “Command line” 选项中输入“mybatis-generator:generate -e”这里加了“-e ”选项是为了让该插件输出详细信息，这样可以帮助我们定位问题。3、配置完成后，点击run-》run generator，不出意外的话，在控制台中会出现BUILD SUCCESS的info信息。 八、项目结构（后） 九、常见错误MyBatis-generator常见错误（整合）过程步骤可以看上面的博文，里面介绍得很详细。]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Log4j2配置]]></title>
    <url>%2F2018%2F05%2F10%2FLog4j2%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[1.默认的配置 默认情况下，只有 &gt;= ERROR 的日志才会输出到控制台（这是因为Log4j有一个默认的配置，它的日志级别是ERRROR，输出只有控制台），下面是我在官网Configuration找来的默认配置文件： log4j2.xml12345678910111213&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;Configuration status="WARN"&gt; &lt;Appenders&gt; &lt;Console name="Console" target="SYSTEM_OUT"&gt; &lt;PatternLayout pattern="%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"/&gt; &lt;/Console&gt; &lt;/Appenders&gt; &lt;Loggers&gt; &lt;Root level="error"&gt; &lt;AppenderRef ref="Console"/&gt; &lt;/Root&gt; &lt;/Loggers&gt; &lt;/Configuration&gt; 现在我们按照官方配置文件的格式，创建自己的定义的日志文件，并且把日志级别改成TRACE： 12345678910111213141516171819 &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;Configuration status="WARN"&gt; &lt;Appenders&gt; &lt;!--控制台的配置--&gt; &lt;Console name="Console" target="SYSTEM_OUT"&gt; &lt;!--输出日志的格式--&gt; &lt;PatternLayout pattern="%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"/&gt; &lt;/Console&gt; &lt;/Appenders&gt; &lt;Loggers&gt; &lt;!-- 只让这个Logger输出trace信息，其他都是error级别 --&gt; &lt;Logger name="com.ray.test.Hello" level="trace" additivity="false"&gt; &lt;Appender-ref ref="Console"/&gt; &lt;/Logger&gt; &lt;Root level="error"&gt; &lt;AppenderRef ref="Console"/&gt; &lt;/Root&gt; &lt;/Loggers&gt; &lt;/Configuration&gt; 2.稍微复杂的例子12345678910111213141516171819202122232425262728293031323334&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;configuration status="error"&gt; &lt;!--先定义所有的appender--&gt; &lt;appenders&gt; &lt;!--这个输出控制台的配置--&gt; &lt;Console name="Console" target="SYSTEM_OUT"&gt; &lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt; &lt;ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/&gt; &lt;!--这个都知道是输出日志的格式--&gt; &lt;PatternLayout pattern="%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"/&gt; &lt;/Console&gt; &lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用--&gt; &lt;File name="log" fileName="log/test.log" append="false"&gt; &lt;PatternLayout pattern="%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"/&gt; &lt;/File&gt; &lt;!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt; &lt;RollingFile name="RollingFile" fileName="logs/app.log" filePattern="log/$$&#123;date:yyyy-MM&#125;/app-%d&#123;MM-dd-yyyy&#125;-%i.log.gz"&gt; &lt;PatternLayout pattern="%d&#123;yyyy-MM-dd 'at' HH:mm:ss z&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"/&gt; &lt;SizeBasedTriggeringPolicy size="50MB"/&gt; &lt;/RollingFile&gt; &lt;/appenders&gt; &lt;!--然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt; &lt;loggers&gt; &lt;!--建立一个默认的root的logger--&gt; &lt;root level="trace"&gt; &lt;appender-ref ref="RollingFile"/&gt; &lt;appender-ref ref="Console"/&gt; &lt;/root&gt; &lt;/loggers&gt;&lt;/configuration&gt; 3.关于日志Level 共有8个级别，按照从低到高为：ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF。 All:最低等级的，用于打开所有日志记录. Trace:是追踪，就是程序推进一下. Debug:指出细粒度信息事件对调试应用程序是非常有帮助的. Info:消息在粗粒度级别上突出强调应用程序的运行过程. Warn:输出警告及warn以下级别的日志. Error:输出错误信息日志. Fatal:输出每个严重的错误事件将会导致应用程序的退出的日志. OFF:最高等级的，用于关闭所有日志记录. 程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。]]></content>
      <categories>
        <category>Testing</category>
      </categories>
      <tags>
        <tag>Log4j2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM--静态资源访问(替换404页面)]]></title>
    <url>%2F2018%2F05%2F05%2FSSM--%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE(%E6%9B%BF%E6%8D%A2404%E9%A1%B5%E9%9D%A2)%2F</url>
    <content type="text"><![CDATA[配置自定义的404页面，替换Tomcat不友好的404页面 常见404页面: 404也就是说找不到当前资源或者资源不存在 12The origin server did not find a current representation for the target resource or is not willing to disclose that one exists. 替换思路：错误404这种常出现的页面，我们可以设置为静态资源，以加快网页访问。 第一步：我们需要先把WEB-INF\web.xml下面的mvc-dispatcher更改为全局配置。123456789101112131415161718192021&lt;!-- spring4 mvc BEGIN --&gt; &lt;servlet&gt; &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt; &lt;!-- mvc调度器 --&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- 配置springMVC需要加载的配置文件 spring-dao.xml,spring-service.xml,spring-web.xml Mybatis - &gt; spring -&gt; springmvc --&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/spring-*.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt; &lt;!-- 默认匹配所有的静态资源,此处配置出错,会产生错误500 --&gt; &lt;!-- 我们默认配置这个是为了让我们的Spring框架接管Servelt，实现Spring控制所有站点请求 --&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;!-- spring4 mvc END --&gt; 错误404的页面是常用页面之一，所以我们在项目的资源目录（webapp）下创建一个static目录，专门用来存放静态资源，如js、css、错误提示页面、登录、注册页面等等。页面都存放在view中 建立完目录如下 第二步：在web.xml中添加错误页面的资源12345&lt;!-- 添加错误页面的资源 --&gt; &lt;error-page&gt; &lt;error-code&gt;404&lt;/error-code&gt; &lt;location&gt;/static/view/404.html&lt;/location&gt; &lt;/error-page&gt; 不过配好后启动项目输入错误页面还是不能正常显示自己配置的404页面，相关图片走丢了 第三步：在spring目录下写spring-web.xml，用于控制哪些资源被拦截。spring-web.xml1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"&gt; &lt;!-- 配置SpringMVC --&gt; &lt;!-- 1.开启SpringMVC注解模式 --&gt; &lt;!-- 简化配置： (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter (2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持 --&gt; &lt;mvc:annotation-driven/&gt; &lt;!-- 2.静态资源默认servlet配置 (1)加入对静态资源的处理：js,gif,png (2)允许使用"/"做整体映射 --&gt; &lt;mvc:resources mapping="/css/**" location="/static/css/" /&gt; &lt;mvc:resources mapping="/js/**" location="/static/js/"/&gt; &lt;mvc:resources mapping="/images/**" location="/static/images/"/&gt; &lt;mvc:default-servlet-handler/&gt; &lt;!-- 3.配置jsp 显示ViewResolver --&gt; &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; &lt;property name="prefix" value="/WEB-INF/view/"/&gt; &lt;property name="suffix" value=".jsp"/&gt; &lt;/bean&gt; &lt;!-- 4.扫描web相关的bean --&gt; &lt;context:component-scan base-package="com.ray.web"/&gt; &lt;/beans&gt; 404.html12345678910&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;img src="images/404.png"&gt; &lt;/body&gt; &lt;/html&gt; 以上文件配置好后，重启服务器，并输入错误地址，现在插入的404页面正常显示了。 这个是我的404页面]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git上传下载]]></title>
    <url>%2F2018%2F05%2F04%2FGit%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[Upload一、在github创建项目并获取 SSH 地址 二、通过命令把这个目录变成Git可以管理的仓库git init 三、通过命令把文件添加到到仓库git add 四、通过命令把文件提交到仓库git commit 五、通过命令把本地仓库与之关联git remote add origin 六、通过命令把本地库的所有内容推送到远程库上git push -u origin master 七、查看Github Clone在本地的仓库下运行命令git clone SSH]]></content>
      <categories>
        <category>Testing</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM + Druid数据源 + log4j2 (二)]]></title>
    <url>%2F2018%2F05%2F04%2FSSM%20%2B%20Druid%E6%95%B0%E6%8D%AE%E6%BA%90%20%2B%20log4j2%20(%E4%BA%8C)%2F</url>
    <content type="text"><![CDATA[项目目录结构(简单实例) 配置文件1、ssm.sql123456789101112131415161718192021222324-- 创建图书表 CREATE TABLE book( book_id BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT '图书ID', name VARCHAR(100) NOT NULL COMMENT '图书名称', number int(11) NOT NULL COMMENT '馆藏数量', PRIMARY KEY(book_id) )ENGINE=INNODB AUTO_INCREMENT=1000 DEFAULT CHARSET=utf8 COMMENT '图书表'; -- 初始化图书数据 INSERT INTO book (book_id, name, number) VALUES (1000, 'Java程序设计', 10), (1001, '数据结构', 10), (1002, '设计模式', 10), (1003, '编译原理', 10); -- 创建预约图书表 CREATE TABLE appointment( book_id BIGINT(20) NOT NULL COMMENT '图书ID', student_id BIGINT(20) NOT NULL COMMENT '学号', appoint_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '预约时间', PRIMARY KEY(book_id, student_id), INDEX idx_appoint_time(appoint_time) )ENGINE=INNODB DEFAULT CHARSET=utf8 COMMENT '预约图书表' 2、Book.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package com.ray.entity;/** * @author Ray * @date 2018/5/4 0004 */public class Book &#123; private long bookId; private String name; private int number; public Book() &#123; &#125; public Book(long bookId, String name, int number) &#123; this.bookId = bookId; this.name = name; this.number = number; &#125; public long getBookId() &#123; return bookId; &#125; public void setBookId(long bookId) &#123; this.bookId = bookId; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getNumber() &#123; return number; &#125; public void setNumber(int number) &#123; this.number = number; &#125; @Override public String toString() &#123; return "Book&#123;" + "bookId=" + bookId + ", name='" + name + '\'' + ", number=" + number + '&#125;'; &#125;&#125; 3、BookDao.java1234567891011121314151617package com.ray.dao;import com.ray.entity.Book;/** * @author Ray * @date 2018/5/4 0004 */public interface BookDao &#123; /** * 通过ID查询单本图书 * @param id * @return */ Book queryById(long id);&#125; 4、BookDao.xml123456789101112131415161718&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.ray.dao.BookDao"&gt; &lt;!-- 目的:为dao接口方法提供sql语句配置 --&gt; &lt;select id="queryById" resultType="Book" parameterType="long"&gt; &lt;!-- 具体的sql语句 --&gt; SELECT book_id, name, number FROM book WHERE book_id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; 5、BaseDaoTest.java123456789101112131415161718192021222324252627282930package com.ray.web;import com.ray.dao.BookDao;import com.ray.entity.Book;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import javax.servlet.http.HttpServletRequest;/** * @author Ray * @date 2018/5/4 0004 */@Controller@RequestMapping("/test")public class BookDaoTest &#123; @Autowired private BookDao bookDao; @RequestMapping("/listbook") public String testQueryById(HttpServletRequest request)&#123; long bookId = 1000; Book book = bookDao.queryById(bookId); request.setAttribute("book",book); System.out.println(book); return "listbook"; &#125;&#125; 6、listbook.jsp12345678910111213141516171819202122232425&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %&gt;&lt;% String path = request.getContextPath(); String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path + "/";%&gt;&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;&lt;html&gt;&lt;head&gt; &lt;base href="&lt;%=basePath%&gt;"&gt; &lt;title&gt;Insert title here&lt;/title&gt; &lt;meta http-equiv="pragma" content="no-cache"&gt; &lt;meta http-equiv="cache-control" content="no-cache"&gt; &lt;meta http-equiv="expires" content="0"&gt; &lt;meta http-equiv="keywords" content="keyword1,keyword2,keyword3"&gt; &lt;meta http-equiv="description" content="This is my page"&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;图书ID: $&#123;book.bookId&#125;&lt;/h1&gt; &lt;h1&gt;图书名称: $&#123;book.name&#125;&lt;/h1&gt; &lt;h1&gt;馆藏数量: $&#123;book.number&#125;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 测试结果]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Log4j2</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>MyBatis</tag>
        <tag>Druid</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM + Druid数据源 + log4j2 (一)]]></title>
    <url>%2F2018%2F05%2F04%2FSSM%20%2B%20Druid%E6%95%B0%E6%8D%AE%E6%BA%90%20%2B%20log4j2%20(%E4%B8%80)%2F</url>
    <content type="text"><![CDATA[项目目录结构 配置文件1、springMVC的配置文件 spring-web.xml123456789101112131415161718192021222324252627282930&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"&gt; &lt;!-- 添加注解驱动 --&gt; &lt;mvc:annotation-driven/&gt; &lt;!-- 默认扫描的包路径 --&gt; &lt;context:component-scan base-package="com.ray.web"/&gt; &lt;!-- 过滤静态文件的拦截 --&gt; &lt;mvc:default-servlet-handler/&gt; &lt;!-- 定义跳转的文件的前后缀 --&gt; &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; &lt;property name="prefix" value="/WEB-INF/view/"/&gt; &lt;property name="suffix" value=".jsp"/&gt; &lt;/bean&gt; &lt;/beans&gt; 2、spring整合MyBatis配置文件spring-dao.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"&gt; &lt;!-- 配置整合mybatis过程 --&gt; &lt;!-- 1.配置数据库相关参数properties的属性：$&#123;url&#125; --&gt; &lt;!-- 使用数据库配置文件解耦 --&gt; &lt;context:property-placeholder location="classpath:jdbc.properties"/&gt; &lt;!-- 下面的druid配置都是基本配置,具体优化设置可以上网查询,也可以去github上面直接搜索druid --&gt; &lt;!-- 2.数据库连接池 --&gt; &lt;bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"&gt; &lt;!-- 配置连接池属性 --&gt; &lt;property name="driverClassName" value="$&#123;jdbc.driver&#125;"/&gt; &lt;property name="url" value="$&#123;jdbc.url&#125;"/&gt; &lt;property name="username" value="$&#123;jdbc.username&#125;"/&gt; &lt;property name="password" value="$&#123;jdbc.password&#125;"/&gt; &lt;!-- 配置初始化大小、最小、最大 --&gt; &lt;property name="initialSize" value="1"/&gt; &lt;property name="minIdle" value="1"/&gt; &lt;property name="maxActive" value="10"/&gt; &lt;!-- 配置获取连接等待超时的时间 --&gt; &lt;property name="maxWait" value="10000"/&gt; &lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt; &lt;property name="timeBetweenEvictionRunsMillis" value="60000"/&gt; &lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt; &lt;property name="minEvictableIdleTimeMillis" value="300000"/&gt; &lt;!-- 验证连接有效与否的SQL，不同的数据配置不同 --&gt; &lt;property name="validationQuery" value="SELECT 1" /&gt; &lt;!-- 如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 --&gt; &lt;property name="testWhileIdle" value="true"/&gt; &lt;!-- 这里建议配置为TRUE，防止取到的连接不可用 --&gt; &lt;property name="testOnBorrow" value="true"/&gt; &lt;property name="testOnReturn" value="false"/&gt; &lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt; &lt;property name="poolPreparedStatements" value="true"/&gt; &lt;property name="maxPoolPreparedStatementPerConnectionSize" value="20"/&gt; &lt;!-- 这里配置提交方式，默认就是TRUE，可以不用配置 --&gt; &lt;property name="defaultAutoCommit" value="true" /&gt; &lt;!-- 开启Druid的监控统计功能 --&gt; &lt;property name="filters" value="stat,log4j2"/&gt; &lt;!-- com.alibaba.druid.filter.Filter --&gt; &lt;property name="proxyFilters"&gt; &lt;list&gt; &lt;ref bean="log-filter"/&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- 上面的druid的配置 --&gt; &lt;bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4j2Filter"&gt; &lt;!-- 表示是否连接所有Connection相关的日志 --&gt; &lt;property name="connectionLogEnabled" value="false"/&gt; &lt;!-- 表示是否连接所有Statement相关的日志 --&gt; &lt;property name="statementLogEnabled" value="false"/&gt; &lt;!-- 表示是否显示结果集 --&gt; &lt;property name="resultSetLogEnabled" value="true"/&gt; &lt;!-- 表示是否显示SQL语句 --&gt; &lt;property name="statementExecutableSqlLogEnable" value="true"/&gt; &lt;/bean&gt; &lt;!-- 3.配置Mybatis SqlSessionFactory对象 --&gt; &lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt; &lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt; &lt;property name="configLocation" value="classpath:mybatis-config.xml"/&gt; &lt;!-- 注入数据库连接池 --&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;!-- 扫描entity包, 使用别名 --&gt; &lt;property name="typeAliasesPackage" value="com.ray.entity"/&gt; &lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt; &lt;property name="mapperLocations" value="classpath:mapper/*.xml"/&gt; &lt;/bean&gt; &lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt; &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;!-- 给出需要扫描Dao接口包 --&gt; &lt;property name="basePackage" value="com.ray.dao"/&gt; &lt;/bean&gt;&lt;/beans&gt; 3、数据库连接参数配置 jdbc.properties1234jdbc.driver=com.mysql.jdbc.Driver jdbc.url=jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=utf8 jdbc.username=root jdbc.password=root 4、MyBatis配置mybatis-config.xml123456789101112131415&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt; &lt;configuration&gt; &lt;!-- 配置全局属性 --&gt; &lt;settings&gt; &lt;!-- 使用jdbc的getGeneratedKeys获取数据库自增主键值 --&gt; &lt;setting name="useGeneratedKeys" value="true" /&gt; &lt;!-- 使用列别名替换列名 默认:true --&gt; &lt;setting name="useColumnLabel" value="true" /&gt; &lt;!-- 开启驼峰命名转换:Table&#123;create_time&#125; -&gt; Entity&#123;createTime&#125; --&gt; &lt;setting name="mapUnderscoreToCamelCase" value="true" /&gt; &lt;/settings&gt; &lt;/configuration&gt; 5、log4j2.xml 配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!-- Log4j 2.x 配置文件。每30秒自动检查和应用配置文件的更新； --&gt;&lt;configuration status="warn" monitorInterval="30" strict="true" schema="Log4J-V2.2.xsd"&gt; &lt;Properties&gt; &lt;property name="LOG_HOME"&gt;logs&lt;/property&gt; &lt;property name="FILE_NAME"&gt;test&lt;/property&gt; &lt;/Properties&gt; &lt;appenders&gt; &lt;!-- 输出到控制台 --&gt; &lt;console name="Console" target="SYSTEM_OUT"&gt; &lt;!-- 需要记录的级别 --&gt; &lt;!-- &lt;ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY" /&gt; --&gt; &lt;PatternLayout pattern="%date&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %level [%C&#123;36&#125;.%M] - %msg%n"/&gt; &lt;/console&gt; &lt;!-- 循环文件日志输出 --&gt; &lt;RollingRandomAccessFile name="running-log" fileName="$&#123;LOG_HOME&#125;/$&#123;FILE_NAME&#125;.log" filePattern="$&#123;LOG_HOME&#125;/$$&#123;date:yyyy-MM&#125;/$&#123;FILE_NAME&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log.gz"&gt; &lt;PatternLayout pattern="[%-5p] %d %c - %m%n" /&gt; &lt;Policies&gt; &lt;TimeBasedTriggeringPolicy /&gt; &lt;SizeBasedTriggeringPolicy size="60 MB" /&gt; &lt;/Policies&gt; &lt;DefaultRolloverStrategy max="20" /&gt; &lt;/RollingRandomAccessFile&gt; &lt;/appenders&gt; &lt;loggers&gt; &lt;!-- 全局配置 --&gt; &lt;root level="info"&gt; &lt;appenderRef ref="Console"/&gt; &lt;appenderRef ref="running-log"/&gt; &lt;/root&gt; &lt;logger name="org.springframework.web" level="debug" additivity="false"&gt; &lt;appenderRef ref="Console"/&gt; &lt;/logger&gt; &lt;logger name="com.mc.core.service" level="debug" additivity="false"&gt; &lt;appender-ref ref="Console"/&gt; &lt;/logger&gt; &lt;!-- druid配置 --&gt; &lt;logger name="druid.sql.Statement" level="debug" additivity="false"&gt; &lt;appender-ref ref="Console"/&gt; &lt;appender-ref ref="running-log"/&gt; &lt;/logger&gt; &lt;logger name="druid.sql.ResultSet" level="debug" additivity="false"&gt; &lt;appender-ref ref="Console"/&gt; &lt;appender-ref ref="running-log"/&gt; &lt;/logger&gt; &lt;/loggers&gt;&lt;/configuration&gt; 6、web.xml配置文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"&gt; &lt;!-- 阿里数据源 BENGIN --&gt; &lt;servlet&gt; &lt;servlet-name&gt;DruidStatView&lt;/servlet-name&gt; &lt;servlet-class&gt;com.alibaba.druid.support.http.StatViewServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;DruidStatView&lt;/servlet-name&gt; &lt;url-pattern&gt;/druid/*&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;!-- 阿里数据源 END --&gt; &lt;!-- spring4 mvc BEGIN --&gt; &lt;servlet&gt; &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt; &lt;!-- mvc调度器 --&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- 配置springMVC需要加载的配置文件 spring-dao.xml,spring-service.xml,spring-web.xml Mybatis - &gt; spring -&gt; springmvc --&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/spring-*.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt; &lt;!-- 默认匹配所有的静态资源,此处配置出错,会产生错误500 --&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;!-- spring4 mvc END --&gt; &lt;!-- Log4j2 BEGIN --&gt; &lt;listener&gt; &lt;listener-class&gt;org.apache.logging.log4j.web.Log4jServletContextListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;filter&gt; &lt;filter-name&gt;log4jServletFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.apache.logging.log4j.web.Log4jServletFilter&lt;/filter-class&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;log4jServletFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt; &lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt; &lt;dispatcher&gt;INCLUDE&lt;/dispatcher&gt; &lt;dispatcher&gt;ERROR&lt;/dispatcher&gt; &lt;/filter-mapping&gt; &lt;!-- Log4j2 END --&gt; &lt;!-- Spring字符集过滤器 BENGIN--&gt; &lt;filter&gt; &lt;filter-name&gt;SpringEncodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;forceEncoding&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;SpringEncodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;!-- Spring字符集过滤器 END--&gt; &lt;!-- 系统首页 --&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;/web-app&gt; 运行结果 启动项目后，在web浏览器中输入：http://localhost:8080/项目名/druid/index.html ，查看druid是否配置成功。]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Log4j2</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>MyBatis</tag>
        <tag>Druid</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM整合所需jar包]]></title>
    <url>%2F2018%2F05%2F04%2FSSM%E6%95%B4%E5%90%88jar%E5%8C%85%2F</url>
    <content type="text"><![CDATA[pom.xml 配置可变版本号,也就是常说的版本管理 （Spring、SpringMvc、Mybatis、Log4j2、Druid） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.ray&lt;/groupId&gt; &lt;!-- 对应前面设置的GroupId --&gt; &lt;artifactId&gt;ssm02&lt;/artifactId&gt; &lt;!-- 前面设置的artifactId--&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;!-- 版本号 --&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;!-- 打包方式war --&gt; &lt;name&gt;ssm02 Maven Webapp&lt;/name&gt; &lt;!-- 显示名字 --&gt; &lt;!-- FIXME change it to the project's website --&gt; &lt;url&gt;http://www.example.com&lt;/url&gt; &lt;!-- 配置可变版本号,也就是常说的版本管理 （Spring、SpringMvc、Mybatis、Log4j2、Druid） --&gt; &lt;!-- 要针对某个依赖进行升级的时候只需要更改下面对应的版本号 --&gt; &lt;!-- 在上面使用版本号的时候需要用固定格式,如: $&#123;包名.version&#125; --&gt; &lt;properties&gt; &lt;mysql.version&gt;5.1.18&lt;/mysql.version&gt; &lt;com.alibaba.druid.version&gt;1.1.9&lt;/com.alibaba.druid.version&gt; &lt;com.mybatis.mybatis.version&gt;3.4.1&lt;/com.mybatis.mybatis.version&gt; &lt;com.mybatis.mybatis_spring.version&gt;1.3.0&lt;/com.mybatis.mybatis_spring.version&gt; &lt;com.google.gson.version&gt;2.7&lt;/com.google.gson.version&gt; &lt;javax.servlet.version&gt;3.1.0&lt;/javax.servlet.version&gt; &lt;org.springframework.version&gt;4.3.2.RELEASE&lt;/org.springframework.version&gt; &lt;com.dyuproject.protostuff.version&gt;1.0.8&lt;/com.dyuproject.protostuff.version&gt; &lt;developer.organization&gt;&lt;![CDATA[scengine]]&gt;&lt;/developer.organization&gt; &lt;/properties&gt; &lt;dependencies&gt;&lt;!-- 远程依赖库 --&gt; &lt;!-- 0.测试单元 --&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 1.数据库 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;!--druid==&gt;阿里巴巴数据库连接池--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;$&#123;com.alibaba.druid.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- DAO: MyBatis --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;$&#123;com.mybatis.mybatis.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;$&#123;com.mybatis.mybatis_spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 2.Servlet web --&gt; &lt;dependency&gt; &lt;groupId&gt;taglibs&lt;/groupId&gt; &lt;artifactId&gt;standard&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt; &lt;artifactId&gt;gson&lt;/artifactId&gt; &lt;version&gt;$&#123;com.google.gson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--Servlet版本设置--&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;$&#123;javax.servlet.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 3.Spring --&gt; &lt;!-- 1)Spring核心 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 2)Spring DAO层 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 3)Spring web --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 4)Spring test --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;$&#123;org.springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt; &lt;artifactId&gt;protostuff-core&lt;/artifactId&gt; &lt;version&gt;$&#123;com.dyuproject.protostuff.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt; &lt;artifactId&gt;protostuff-runtime&lt;/artifactId&gt; &lt;version&gt;$&#123;com.dyuproject.protostuff.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Map工具类 --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-collections&lt;/groupId&gt; &lt;artifactId&gt;commons-collections&lt;/artifactId&gt; &lt;version&gt;3.2.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 文件上传工具 --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-io&lt;/groupId&gt; &lt;artifactId&gt;commons-io&lt;/artifactId&gt; &lt;version&gt;2.5&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 日志文件log4j2 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-core&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-api&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j-web&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!-- 构建项目的最终名称 --&gt; &lt;build&gt; &lt;finalName&gt;ssm02&lt;/finalName&gt; &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt; &lt;/plugin&gt; &lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.7.0&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.20.1&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt; &lt;version&gt;3.2.0&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt; &lt;version&gt;2.5.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;/build&gt;&lt;/project&gt;]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最优雅SSM框架(三)]]></title>
    <url>%2F2018%2F05%2F02%2F%E6%9C%80%E4%BC%98%E9%9B%85SSM%E6%A1%86%E6%9E%B6(%E4%B8%89)%2F</url>
    <content type="text"><![CDATA[SSM框架简介 手把手教你整合最优化SSM框架: SpringMVC + Spring + MyBatisSSM框架应用实例（图书管理系统）一开始想就这样结束教程，但是发现其实很多人都还不会把这个SSM框架用起来，特别是mybatis部分。那我现在就以最常见的“图书管理系统”中【查询图书】和【预约图书】业务来做一个demo吧！首先新建数据库名为ssm，再创建两张表：图书表book和预约图书表appointment，并且为book表初始化一些数据，sql如下。 ssm.sql123456789101112131415161718192021222324-- 创建图书表CREATE TABLE book ( book_id BIGINT (20) NOT NULL AUTO_INCREMENT COMMENT '图书ID', NAME VARCHAR (100) NOT NULL COMMENT '图书名称', number INT (11) NOT NULL COMMENT '馆藏数量', PRIMARY KEY (book_id)) ENGINE = INNODB AUTO_INCREMENT = 1000 DEFAULT CHARSET = utf8 COMMENT '图书表';-- 初始化图书数据INSERT INTO book (book_id, NAME, number)VALUES (1000, 'Java程序设计', 10), (1001, '数据结构', 10), (1002, '设计模式', 10), (1003, '编译原理', 10);-- 创建预约图书表CREATE TABLE appointment ( book_id BIGINT (20) NOT NULL COMMENT '图书ID', student_id BIGINT (20) NOT NULL COMMENT '学号', appoint_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '预约时间', PRIMARY KEY (book_id, student_id), INDEX idx_appoint_time (appoint_time)) ENGINE = INNODB DEFAULT CHARSET = utf8 COMMENT '预约图书表' 在entity包中添加两个对应的实体，图书实体Book.java和预约图书实体Appointment.java。Book.java1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package com.ray.entity;/** * @author Ray * @date 2018/5/2 0002 * 图书类 */public class Book &#123; private long bookId; // 图书ID private String name; // 图书名称 private int number; // 馆藏数量 // 构造方法，getter和setter方法，toString方法 public Book() &#123; &#125; public Book(long bookId, String name, int number) &#123; this.bookId = bookId; this.name = name; this.number = number; &#125; public long getBookId() &#123; return bookId; &#125; public void setBookId(long bookId) &#123; this.bookId = bookId; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getNumber() &#123; return number; &#125; public void setNumber(int number) &#123; this.number = number; &#125; @Override public String toString() &#123; return "Book&#123;" + "bookId=" + bookId + ", name='" + name + '\'' + ", number=" + number + '&#125;'; &#125;&#125;Appointment.java1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071package com.ray.entity;import java.util.Date;/** * @author Ray * @date 2018/5/2 0002\ * 预约图书实体 */public class Appointment &#123; private long bookId; // 图书ID private long studentId; // 学号 private Date appointTime; // 预约时间 // 多对一的复合属性 private Book book; // 图书实体 // 构造方法，getter和setter方法，toString方法 public Appointment() &#123; &#125; public Appointment(long bookId, long studentId, Date appointTime, Book book) &#123; this.bookId = bookId; this.studentId = studentId; this.appointTime = appointTime; this.book = book; &#125; public long getBookId() &#123; return bookId; &#125; public void setBookId(long bookId) &#123; this.bookId = bookId; &#125; public long getStudentId() &#123; return studentId; &#125; public void setStudentId(long studentId) &#123; this.studentId = studentId; &#125; public Date getAppointTime() &#123; return appointTime; &#125; public void setAppointTime(Date appointTime) &#123; this.appointTime = appointTime; &#125; public Book getBook() &#123; return book; &#125; public void setBook(Book book) &#123; this.book = book; &#125; @Override public String toString() &#123; return "Appointment&#123;" + "bookId=" + bookId + ", studentId=" + studentId + ", appointTime=" + appointTime + ", book=" + book + '&#125;'; &#125;&#125;在dao包新建 接口 BookDao.java 和 Appointment.java BookDao.java1234567891011121314151617181920212223242526272829303132333435package com.ray.dao;import com.ray.entity.Book;import org.apache.ibatis.annotations.Param;import java.util.List;/** * @author Ray * @date 2018/5/2 0002 */public interface BookDao &#123; /** * 通过ID查询单本图书 * @param id * @return */ Book queryById(long id); /** * 查询所有图书 * @param offset 查询起始位置 * @param limit 查询条数 * @return */ List&lt;Book&gt; queryAll(@Param("offset") int offset, @Param("limit") int limit); /** * 减少馆藏数量 * @param bookId * @return 如果影响行数等于&gt;1，表示更新的记录行数 */ int reduceNumber(long bookId);&#125; AppointmentDao.java123456789101112131415161718192021222324252627package com.ray.dao;import com.ray.entity.Appointment;import org.apache.ibatis.annotations.Param;/** * @author Ray * @date 2018/5/2 0002 */public interface AppointmentDao &#123; /** * 插入预约图书记录 * @param bookId * @param studentId * @return 插入的行数 */ int insertAppointment(@Param("bookId") long bookId, @Param("studentId") long studentId); /** * 通过主键查询预约图书记录，并且携带图书实体 * @param bookId * @param studentId * @return */ Appointment queryByKeyWithBook(@Param("bookId") long bookId, @Param("studentId") long studentId);&#125; 提示：这里为什么要给方法的参数添加@Param注解呢？是因为该方法有两个或以上的参数，一定要加，不然mybatis识别不了。上面的BookDao接口的queryById方法和reduceNumber方法只有一个参数book_id，所以可以不用加 @Param注解，当然加了也无所谓~ 注意，这里不需要实现dao接口不用编写daoImpl， mybatis会给我们动态实现，但是我们需要编写相应的mapper。 在mapper目录里新建两个文件BookDao.xml和AppointmentDao.xml，分别对应上面两个dao接口，代码如下。 BookDao.xml1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.ray.dao.BookDao"&gt; &lt;!-- 目的:为dao接口方法提供sql语句配置 --&gt; &lt;select id="queryById" resultType="Book" parameterType="long"&gt; &lt;!-- 具体的sql语句 --&gt; SELECT book_id, name, number FROM book WHERE book_id = #&#123;id&#125; &lt;/select&gt; &lt;select id="queryAll" resultType="Book"&gt; SELECT book_id, name, number FROM book ORDER BY book_id LIMIT #&#123;offset&#125;, #&#123;limit&#125; &lt;/select&gt; &lt;update id="reduceNumber"&gt; UPDATE book SET number = number - 1 WHERE book_id = #&#123;bookId&#125; AND number &gt; 0 &lt;/update&gt;&lt;/mapper&gt; AppointmentDao.xml12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.ray.dao.AppointmentDao"&gt; &lt;insert id="insertAppointment"&gt; &lt;!-- ignore 主键冲突,报错 --&gt; INSERT ignore INTO appointment(book_id, student_id) VALUES (#&#123;bookId&#125;, #&#123;studentId&#125;) &lt;/insert&gt; &lt;select id="queryByKeyWithBook" resultType="Appointment"&gt; &lt;!-- 告诉MyBatis如何把结果映射到Appointment同时映射book属性 --&gt; &lt;!-- 可以自由控制SQL --&gt; SELECT a.book_id, a.student_id, a.appoint_time, b.book_id "book.book_id", b.name "book.name", b.number "book.number" FROM appointment a INNER JOIN book b ON a.book_id = b.book_id WHERE a.book_id = #&#123;bookId&#125; AND a.student_id = #&#123;studentId&#125; &lt;/select&gt;&lt;/mapper&gt; mapper总结：namespace是该xml对应的接口全名，select和update中的id对应方法名，resultType是返回值类型，parameterType是参数类型（这个其实可选），最后#{…}中填写的是方法的参数，看懂了是不是很简单！！我也这么觉得~ 还有一个小技巧要交给大家，就是在返回Appointment对象包含了一个属性名为book的Book对象，那么可以使用”book.属性名”的方式来取值，看上面queryByKeyWithBook方法的sql。 dao层写完了，接下来test对应的package写我们测试方法吧。 因为我们之后会写很多测试方法，在测试前需要让程序读入spring-dao和mybatis等配置文件，所以我这里就抽离出来一个BaseTest类，只要是测试方法就继承它，这样那些繁琐的重复的代码就不用写那么多了~ BaseTest.java12345678910111213141516package com.ray;import org.junit.runner.RunWith;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;/** * @author Ray * @date 2018/5/2 0002 * 配置spring和junit整合，junit启动时加载springIOC容器 spring-test,junit */@RunWith(SpringJUnit4ClassRunner.class)// 告诉junit spring配置文件@ContextConfiguration(&#123;"classpath:spring/spring-dao.xml", "classpath:spring/spring-service.xml"&#125;)public class BaseTest &#123;&#125; 因为spring-service在service层的测试中会时候到，这里也一起引入算了！新建BookDaoTest.java和AppointmentDaoTest.java两个dao测试文件。 BookDaoTest.java1234567891011121314151617181920212223242526272829303132333435363738394041424344package com.ray;import com.ray.dao.BookDao;import com.ray.entity.Book;import org.junit.Test;import org.springframework.beans.factory.annotation.Autowired;import java.util.List;/** * @author Ray * @date 2018/5/2 0002 */public class BookDaoTest extends BaseTest &#123; @Autowired private BookDao bookDao; @Test public void testQueryById()&#123; long bookId = 1000; Book book = bookDao.queryById(bookId); System.out.println(book); &#125; @Test public void testQueryAll()&#123; List&lt;Book&gt; books = bookDao.queryAll(0,4); for (Book book : books) &#123; System.out.println(book); &#125; &#125; @Test public void testReduceNumber()&#123; long bookId = 1000; int update = bookDao.reduceNumber(bookId); System.out.println("update= " + update); Book book = bookDao.queryById(bookId); System.out.println(book); &#125;&#125; BookDaoTest测试结果 testQueryById testQueryAll testReduceNumber AppointmentDaoTest.java123456789101112131415161718192021222324252627282930313233package com.ray; import com.ray.dao.AppointmentDao; import com.ray.entity.Appointment; import org.junit.Test; import org.springframework.beans.factory.annotation.Autowired;/** * @author Ray * @date 2018/5/2 0002 */public class AppointmentDaoTest extends BaseTest &#123; @Autowired private AppointmentDao appointmentDao; @Test public void testInsertAppointment()&#123; long bookId = 1000; long studentId = 1234567890L; int insert = appointmentDao.insertAppointment(bookId, studentId); System.out.println("insert= " + insert); &#125; @Test public void testQueryByKeyWithBook()&#123; long bookId = 1000; long studentId = 1234567890L; Appointment appointment = appointmentDao.queryByKeyWithBook(bookId, studentId); System.out.println(appointment); System.out.println(appointment.getBook()); &#125;&#125; AppointmentDaoTest测试结果 testInsertAppointment testQueryByKeyWithBook 到此，我们的SSM框架整合配置，与应用实例部分已经结束了，我把所有源码和jar包一起打包放在了我的GitHub上，需要的可以去下载]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最优雅SSM框架(一)]]></title>
    <url>%2F2018%2F05%2F02%2F%E6%9C%80%E4%BC%98%E9%9B%85SSM%E6%A1%86%E6%9E%B6(%E4%B8%80)%2F</url>
    <content type="text"><![CDATA[SSM框架简介 手把手教你整合最优化SSM框架: SpringMVC + Spring + MyBatis SSM框架工具 必要的工具: 1.Java(JDK 8) - 参考：http://blog.csdn.net/q343509740/article/details/79473608 2.Maven 3 - 参考： http://blog.csdn.net/q343509740/article/details/79454368 3.IDEA - 参考：https://www.jetbrains.com/idea/ 项目目录结构 项目目录作用 项目包的作用]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最优雅SSM框架(二)]]></title>
    <url>%2F2018%2F05%2F02%2F%E6%9C%80%E4%BC%98%E9%9B%85SSM%E6%A1%86%E6%9E%B6(%E4%BA%8C)%2F</url>
    <content type="text"><![CDATA[SSM框架简介 手把手教你整合最优化SSM框架: SpringMVC + Spring + MyBatis下面我们真正开始敲代码了~基础工作，导入我们相应的jar包，我使用的是maven来管理我们的jar，所以只需要在pom.xml中加入相应的依赖就好了，如果不使用maven的可以自己去官网下载相应的jar，放到项目WEB-INF/lib目录下。 所需jar包: 1.Junit 2.slf4j 3.mysql | c3p0 4.MyBatis 5.Servlet 6.Spring 7.Jedispom.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.ray&lt;/groupId&gt; &lt;artifactId&gt;ssm01&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;name&gt;ssm01 Maven Webapp&lt;/name&gt; &lt;!-- FIXME change it to the project's website --&gt; &lt;url&gt;http://www.example.com&lt;/url&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!-- 单元测试 --&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 1.日志 --&gt; &lt;!-- 实现slf4j接口并整合 --&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.2.3&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 2.数据库 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.18&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.mchange&lt;/groupId&gt; &lt;artifactId&gt;c3p0&lt;/artifactId&gt; &lt;version&gt;0.9.5.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- DAO: MyBatis --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.4.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 3.Servlet web --&gt; &lt;dependency&gt; &lt;groupId&gt;taglibs&lt;/groupId&gt; &lt;artifactId&gt;standard&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.9.4&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- 4.Spring --&gt; &lt;!-- 1)Spring核心 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 2)Spring DAO层 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 3)Spring web --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- redis客户端:Jedis --&gt; &lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;2.9.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt; &lt;artifactId&gt;protostuff-core&lt;/artifactId&gt; &lt;version&gt;1.0.8&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.dyuproject.protostuff&lt;/groupId&gt; &lt;artifactId&gt;protostuff-runtime&lt;/artifactId&gt; &lt;version&gt;1.0.8&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- Map工具类 --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-collections&lt;/groupId&gt; &lt;artifactId&gt;commons-collections&lt;/artifactId&gt; &lt;version&gt;3.2.1&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;ssm01&lt;/finalName&gt; &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt; &lt;/plugin&gt; &lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.7.0&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.20.1&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt; &lt;version&gt;3.2.0&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt; &lt;version&gt;2.5.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;/build&gt;&lt;/project&gt;正式开始第一步：我们先在spring文件夹里新建spring-dao.xml文件，因为spring的配置太多，我们这里分三层，分别是dao service web。 1.读入数据库连接相关参数（可选） 2.配置数据连接池 3.配置连接属性，可以不读配置项文件直接在这里写死 4.配置c3p0，只配了几个常用的 5.配置SqlSessionFactory对象（mybatis） 6.扫描dao层接口，动态实现dao接口，也就是说不需要daoImpl，sql和参数都写在xml文件上spring-dao.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt; &lt;!-- 配置整合mybatis过程 --&gt; &lt;!-- 1.配置数据库相关参数properties的属性 --&gt; &lt;context:property-placeholder location="classpath:jdbc.properties"/&gt; &lt;!-- 2.数据库连接池 --&gt; &lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt; &lt;!-- 3.配置连接池属性 --&gt; &lt;property name="driverClass" value="$&#123;jdbc.driver&#125;"/&gt; &lt;property name="jdbcUrl" value="$&#123;jdbc.url&#125;" /&gt; &lt;property name="user" value="$&#123;jdbc.username&#125;"/&gt; &lt;property name="password" value="$&#123;jdbc.password&#125;"/&gt; &lt;!-- 4.配置c3p0, 常用属性 --&gt; &lt;property name="maxPoolSize" value="30"/&gt; &lt;property name="minPoolSize" value="10"/&gt; &lt;!-- 关闭连接后不自动commit --&gt; &lt;property name="autoCommitOnClose" value="false"/&gt; &lt;!-- 获取连接超时时间 --&gt; &lt;property name="checkoutTimeout" value="10000"/&gt; &lt;!-- 当获取连接是失败重试次数 --&gt; &lt;property name="acquireRetryAttempts" value="2"/&gt; &lt;/bean&gt; &lt;!-- 5.配置SqlSessionFactory对象 --&gt; &lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt; &lt;!-- 注入数据库连接池 --&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;!-- 配置MyBaties全局配置文件: mybatis-config.xml --&gt; &lt;property name="configLocation" value="classpath:mybatis-config.xml"/&gt; &lt;!-- 扫描entity包, 使用别名 --&gt; &lt;property name="typeAliasesPackage" value="com.ray.entity"/&gt; &lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt; &lt;property name="mapperLocations" value="classpath:mapper/*.xml"/&gt; &lt;/bean&gt; &lt;!-- 6.配置扫描Dao接口包,动态实现Dao接口,注入到spring容器中 --&gt; &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;!-- 注入sqlSessionFactory --&gt; &lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/&gt; &lt;!-- 给出需要扫描Dao接口包 --&gt; &lt;property name="basePackage" value="com.ray.dao"/&gt; &lt;/bean&gt;&lt;/beans&gt;因为数据库配置相关参数是读取配置文件，所以在resources文件夹里新建一个jdbc.properties文件，存放我们4个最常见的数据库连接属性 jdbc.properties1234jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=utf8jdbc.username=rootjdbc.password=root 因为这里用到了mybatis，所以需要配置mybatis核心文件，在recources文件夹里新建mybatis-config.xml文件。 1.使用自增主键 2.使用列别名 3.开启驼峰命名转换 create_time -&gt; createTimemybatis-config.xml1234567891011121314151617&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt; &lt;!-- 配置全局属性 --&gt; &lt;settings&gt; &lt;!-- 1.使用jdbc的getGeneratedKeys获取数据库自增主键值 --&gt; &lt;setting name="useGeneratedKeys" value="true"/&gt; &lt;!-- 2.使用列别名替换列名 默认:true --&gt; &lt;setting name="useColumnLabel" value="true"/&gt; &lt;!-- 3.开启驼峰命名转换:Table&#123;create_time&#125; -&gt; Entity&#123;createTime&#125; --&gt; &lt;setting name="mapUnderscoreToCamelCase" value="true"/&gt; &lt;/settings&gt;&lt;/configuration&gt;第二步：刚弄好dao层，接下来到service层了。在spring文件夹里新建spring-service.xml文件。 1.扫描service包所有注解 @Service 2.配置事务管理器，把事务管理交由spring来完成 3.配置基于注解的声明式事务，可以直接在方法上@Transactionspring-service.xml123456789101112131415161718192021222324&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"&gt; &lt;!-- 1.扫描service包下所有使用注解的类型 --&gt; &lt;context:component-scan base-package="com.ray.service"/&gt; &lt;!-- 2.配置事务管理器 --&gt; &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;!-- 注入数据库连接池 --&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;/bean&gt; &lt;!-- 3.配置基于注解的声明式事务 --&gt; &lt;tx:annotation-driven transaction-manager="transactionManager"/&gt;&lt;/beans&gt;第三步：配置web层，在spring文件夹里新建spring-web.xml文件。 1.开启SpringMVC注解模式，可以使用@RequestMapping，@PathVariable，@ResponseBody等 2.对静态资源处理，如js，css，jpg等 3.配置jsp 显示ViewResolver，例如在controller中某个方法返回一个string类型的”login”，实际上会返回”/WEB-INF/login.jsp” 4.扫描web层 @Controllerspring-web.xml123456789101112131415161718192021222324252627282930313233343536&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"&gt; &lt;!-- 配置SpringMVC --&gt; &lt;!-- 1.开启SpringMVC注解模式 --&gt; &lt;!-- 简化配置： (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter (2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持 --&gt; &lt;mvc:annotation-driven /&gt; &lt;!-- 2.静态资源默认servlet配置 (1)加入对静态资源的处理：js,gif,png (2)允许使用"/"做整体映射 --&gt; &lt;mvc:default-servlet-handler /&gt; &lt;!-- 3.配置jsp 显示ViewResolver --&gt; &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; &lt;property name="viewClass" value="org.springframework.web.servlet.view.JstlView" /&gt; &lt;property name="prefix" value="/WEB-INF/jsp" /&gt; &lt;property name="suffix" value=".jsp" /&gt; &lt;/bean&gt; &lt;!-- 4.扫描web相关的bean --&gt; &lt;context:component-scan base-package="com.ray.web"/&gt;&lt;/beans&gt;第四步：最后就是修改web.xml文件了，它在webapp的WEB-INF下。 web.xml123456789101112131415161718192021222324252627&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1" metadata-complete="true"&gt; &lt;!-- 如果是用mvn命令生成的xml，需要修改servlet版本为3.1 --&gt; &lt;!-- 配置DispatcherServlet --&gt; &lt;servlet&gt; &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- 配置springMVC需要加载的配置文件 spring-dao.xml,spring-service.xml,spring-web.xml Mybatis - &gt; spring -&gt; springmvc --&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/spring-*.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt; &lt;!-- 默认匹配所有的请求 --&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 我们在项目中经常会使用到日志，所以这里还有配置日志xml，在resources文件夹里新建logback.xml文件，所给出的日志输出格式也是最基本的控制台s呼出，大家有兴趣查看logback官方文档或推荐文档。 logback.xml12345678910111213&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;configuration debug="true"&gt; &lt;appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender"&gt; &lt;!-- encoders are by default assigned the type ch.qos.logback.classic.encoder.PatternLayoutEncoder --&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;root level="debug"&gt; &lt;appender-ref ref="STDOUT" /&gt; &lt;/root&gt;&lt;/configuration&gt; 到目前为止，我们一共写了7个配置文件，我们一起来看下最终的配置文件结构图。]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL命令]]></title>
    <url>%2F2018%2F05%2F01%2FMySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[MySQL命令 MySQL的基本操作可以包括两个方面：MySQL常用语句如高频率使用的增删改查（CRUD）语句和MySQL高级功能，如存储过程，触发器，事务处理等。而这两个方面又可以细分如下： 1. 表(或数据库)操作语句1.1. 查询表（或数据库） 获取所有可用的数据库：SHOW DATABASES； 选择数据库：USE customers； 用于显示数据库服务器的状态信息：SHOW STATUS； 用来显示授权用户的安全权限：SHOW GRANTS； 用来显示数据库服务器或警告信息：SHOW ERRORS 或者 SHOW WARNINGS； 用于显示创建数据库时的创建语句：SHOW CREATE DATABASE customers； 用于显示创建表时的创建语句：SHOW CREATE TABLE customers； 获取当前所选的数据库中所有可用的表：SHOW TABLES； 获取表中所有列的信息：SHOW COLUMNS FROM tableName；同时DESCRIBE语句有相同的效果：DESCRIBE tableName；1.2. 新建表（或）数据库 新建数据库：CREATE DATABASE customers; 创建表可以使用CREATE TABLE语句: CREATE TABLE customers( cust_id INT NOT NULL AUTO_INCREMENT, cust_name CHAR(50) NOT NULL, cust_age INT NULL DEFAULT 18, PRIMARY KEY(cust_id) )ENGINE=INNODB;有这样一些细节： 允许NULL值，则说明在插入行数据时允许不给出该列的值，而NOT NULL则表示在插入或者更新该列数据，必须明确给出该列的值； DEFAULT表示该列的默认值，在插入行数据时，若没有给出该列的值就会使用其指定的默认值； PRIMARY KEY用于指定主键，主键可以指定一列数据，而可以由多列数据组合构成，如PRIMARY KEY(cust_id,cust_name)； ENGINE用于指定引擎类型。常见的引擎类型有这些：（1）InnoDB是一个支持可靠的事务处理的引擎，但是不支持全文本搜索；（2）MyISAM是一个性能极高的引擎，它支持全文本搜索，但是不支持事务处理；（3）MEMORY在功能上等同于MyISAM，但由于数据存储在内存中，速度很快（特别适合于临时表）；在创建表的时候可以使用FOREIGN KEY来创建外键，即一个表中的FOREIGN KEY指向另一个表中PRIMARY KEY。外键FOREIGN KEY用于约束破坏表的联结动作，保证两个表的数据完整性。同时也能防止非法数据插入外键列，因为该列值必须指向另一个表的主键。实例为： CREATE TABLE Orders ( Id_O int NOT NULL, OrderNo int NOT NULL, Id_P int, PRIMARY KEY (Id_O), FOREIGN KEY (Id_P) REFERENCES Persons(Id_P) )1.3 删除表（或数据库） 删除数据库：DROP DATABASE customers； 删除表，使用DROP TABLE子句：DROP TABLE customers。1.4 更新表更新表结构信息可以使用ALTER TABLE子句，如为表增加一列：ALTER TABLE vendors ADD vend_name CHAR(20)；另外经常用于定义外键，如： ALTER TABLE customers ADD CONSTRAINT fk_custormer_orders FOREIGN KEY(cust_id) REFERENCES orders (order_cust)重命名表，使用RENAME子句。RENAME TABLE backup_customers TO customers, backup_vendors TO vendors；更改多个表名，之间用逗号间隔2 表数据操作语句2.1 查询表数据 基本查询语句 根据过滤条件查询表中的单列或者多列或者全部列的信息SELECT FROM WEHERE：SELECT cust_id,cust_name FROM customers WHERE cust_id.10086；其中过滤条件操作符有：=，&lt;&gt;,!=,&lt;,&lt;=,&gt;,&gt;=,BETWEEN AND,IS NULL； 为查询出的某一列信息去重DISTINCT：SELECT DISTINCT cust_name FROM customers； 限制单列查询结果的行数：SELECT cust_name FROM customers LIMIT 5；LIMIT后跟一个数值，表示从第0行开始取，共取5行数据；如果LIMIT 5，5表示从第5行（数据库中实际第6行记录）开始取，共取5行数据。注意：数据是从第0行开始计数的； ORDER BY子句取一个或者多个列，据此对输出进行排序：SELECT cust_id,cust_name FROM customers ORDER BY cust_id DESC, cust_name; IN操作符用来指定条件范围，范围中的每个条件都可以进行匹配：SELECT cust_id, cust_name FROM customers WHERE cust_id IN (1000,2000)。另外，NOT操作符可以和IN操作符配合使用，用于表示检索出不符合条件的所有数据； LIKE操作符用来表明模糊查询，与之配合使用的通配符有%，%表示任何字符出现任何次数；_，_表示只能匹配一个字符：SELECT cust_id,cust_name FROM customers WHERE cust_name LIKE ‘%happy%’； 使用分组查询并可以满足一定的分组过滤条件GROUP BY HAVING。如检索总计订单金额大于等于50的订单号和订单总金额，并按总金额进行排序：SELECT order_num,SUM(quantityitem_price) AS order_total FROM orderitems GROUP BY order_num HAVING SUM(quantityitem_price)&gt;=50 ORDER BY order_total WHERE和HAVING的比较。WHERE是行级过滤，而HAVING是组级过滤。被WHERE过滤掉的数据不会出现在分组中。WHERE中通配符以及多个WHERE子句的连接同样适用于HAVING子句；GROUP BY的使用注意事项： （1）GROUP BY子句中可以嵌套分组（即通过多个列进行分组GROUP BY cust_id, cust_name），但是进行数据汇总时，是在最后规定的分组上进行；（2）GROUP BY子句中列出的每个列都必须是检索列或者是有效的表达式。（3）如果有NULL值，将值NULL作为一个分组进行返回，如果有多行NULL值，它们将分为一组 嵌套其他查询中的查询，称之为子查询。执行过程由里向外，里层查询结果作为外层查询的条件：SELECT cust_id FROM orders WHERE order_num IN (SELECT order_num FROM orderitems WHERE prod_id = ‘happy’)。当然，多表的查询可以是用联结查询。联结查询 内联结用又称之为内部联结，是基于两个表 之间的的相等测试。如果不加过滤条件，会造成“笛卡尔积”。SELECT vend_name,prod_name,prod_price FROM vendors INNER JOIN products ON vendors.vend_id=products.vend_id；同样可以使用WHERE进行多表联结查询，但是更推荐使用INNER JOIN等联结方式； 外部联结包括左外联结LEFT JOIN和右外联结RIGHT JOIN和全连接FULL JOIN。例如查询每个客户的订单数：SELECT customers.cust_id,orders.orders_num FROM customers LEFT JOIN orders ON orders.cust_id =customers.cust_id；LEFT JOIN 会全部返回左表数据，RIGHT JOIN会全部返回右表数据，FULL JOIN会将左右两个表的数据全部返回； 联结查询与聚集函数一起使用。如查询每个客户的订单数：SELECT customers.cust_name,customers.cust_id,COUNT(orders.order_num) AS num_ord FROM customers INNER JOIN orders ON customers.cust_id=orders.cust_id GROUP BY customers.cust_id；组合查询 多个查询（SELECT）可以使用UNION将多个查询结果进行合并成一个结果集返回，UNION必须包含两个及两个以上的SELECT查询，并且每个传必须包含相同的列、表达式或聚集函数，数据类型不必完全相同，MySQL会进行隐式的类型转换。SELECT vend_id,prod_id,prod_price FROM products WHERE prod_price&gt;5 UINON SELECT vend_id,prod_id,prod_price FROM products WHERE vend_id IN (1001,1002); UNION返回的是去重后的结果，如果不需要去重则可以使用UNION ALL； 可以多组合查询使用ORDER BY进行排序，但是是针对的最终的结果集进行排序，而不是其中单个SELECT查询进行排序，因此对于组合查询来说ORDER BY子句只有一个。SELECT vend_id,prod_id,prod_price FROM products WHERE prod_price&gt;5 UINON SELECT vend_id,prod_id,prod_price FROM products WHERE vend_id IN (1001,1002) ORDER BY vend_id使用函数对数据进行处理 拼接列名：SELECT Concat (vendName,’(‘,vendCountry,’)’) FROM vendors ORDER BY vendName； 执行算术表达式计算：SELECT prodId, quantity,price, quantityprice AS expandedPrice FROM orderItems； 文本处理函数如Upper(),LTrim(),RTrim()等函数。比如使用Upper函数将文本转换成大写：SELECT vendName, Upper(vendName) FROM vendors ORDER BY vendName； 时间和日期处理函数，如Date(),Day()等。SELECT custId, orderNum FROM orders WHERE Date(orderDate)=’2015-09-01’； 数值处理函数，如Abs(),Cos()等； 常用的聚集函数。如AVG(),COUNT(),MAX(),MIN()以及SUM()。SELECT COUNT() AS numbers, MIN(prod_price) AS price_min, MAX(prod_price) AS price_max,AVG(prod_price) AS price_avg FROM products；2.2 插入表数据 向表中插入行数据可以使用INSERT INTO子句，更安全的方式是指定列名。INSERT INTO customers (cust_name, cust_email) VALUES(‘happy’,&#39;happy@gmail.com‘)；在INSERT INTO子句中能够省略列名的前提条件是：该列可以允许定义为NULL值或者在定义该列时给出去了默认值； 如果插入多行数据可以将多组值用逗号进行分隔即可。INSERT INTO customers (cust_name, cust_email) VALUES(‘happy’,&#39;happy@gmail.com‘),(‘smart’,&#39;smart@gmail.com‘)； 将查询出来的数据插入表中，可以使用INSERT SELECT语句。INSERT INTO customers(cust_id,cust_contact) SELECT cust_id, cust_contact FROM customers WHERE cust_id&gt;5；其中SELECT中可以带WHERE过滤条件；INSERT SELECT通常被用于复制表数据2.3 更新表数据 如果要更新表数据的话，使用UPDATE子句：UPDATE customers SET cust_name =’happy’,cust_email=&#39;happy@gmail.com‘ WHERE cust_id = 1001； 注意：如果不加WHERE条件指定到某一行的话，会更新表中某一列全部的数据。2.4 删除表数据 如果从表中删除数据的话，可以使用DELETE子句。DELETE FROM customers WHERE cust_id = 10086；删除的数据必定是表中行数据，而不是某一列。因此，与UPDATE子句相比，DELETE子句并不需要指定是哪一列，而仅仅只需要指定具体的表名即可； 注意：如果不添加WHERE指定条件的话，会将整个表中所有行数据全部删除。另外，DELETE只是删除表中的数据，而不会删除表结构信息； 如果想删除表中全部的数据，可以使用TRUNCATE，比DELETE删除效率更高；3. SQL中关键字执行顺序 在SQL语句中每个关键字都会按照顺序往下执行，而每一步操作，会生成一个虚拟表，最后产生的虚拟表会作为执行的最终结果返回。下面的是常用的关键字的执行顺序： (8)SELECT (9)DISTINCT&lt;select_list&gt; (1)FROM &lt;left_table&gt; (3)&lt;join_type&gt; JOIN &lt;right_table&gt; (2) ON &lt;join_condition&gt; (4)WHERE &lt;where_condition&gt; (5)GROUP BY&lt;group_by_list&gt; (6)WITH{CUBE|ROLLUP} (7)HAVING&lt;having_condition&gt; (10)ORDER BY&lt;order_by_list&gt; (11)LIMIT&lt;limit_number&gt;FROM：对FROM左边的表和右边的表计算笛卡尔积，产生虚表VT1；ON：对虚拟表VT1进行ON筛选，只有那些符合&lt;join_condition&gt;条件的行才会被记录在虚拟表VT2中；JOIN：如果是OUT JOIN，那么将保留表中（如左表或者右表）未匹配的行作为外部行添加到虚拟表VT2中，从而产生虚拟表VT3；WHERE:对虚拟表VT3进行WHERE条件过滤，只有符合&lt;where_condition&gt;的记录才会被放入到虚拟表VT4；GROUP BY：根据GROUP BY子句中的列，对虚拟表VT4进行分组操作，产生虚拟表VT5；CUBE|ROLLUP：对虚拟表VT5进行CUBE或者ROLLUP操作，产生虚拟表VT6；HAVING：对虚拟表VT6进行HAVING条件过滤，只有符合&lt;having_condition&gt;的记录才会被插入到虚拟表VT7中；SELECT：执行SELECT操作，选择指定的列，插入到虚拟表VT8中；DISTINCT：对虚拟表VT8中的记录进行去重，产生虚拟表VT9；ORDER BY：将虚拟表VT9中的记录按照&lt;order_by_list&gt;进行排序操作，产生虚拟表VT10；LIMIT：取出指定行的记录，产生虚拟表VT11，并将结果返回。4. 索引 MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，而组合索引，即一个索引包含多个列。4.1 创建索引 创建索引有两种方式，一种是直接利用CREATE INDEX进行创建，另外一种则是通过修改表结构来进行添加，则是利用ALTER TABLE语句。使用CREATE INDEX语法为： CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name [USING index_type] ON table_name (index_col_name,…)其中对应的语法变量信息如下：[UNIQUE|FULLTEXT|SPATIAL]其中括号中的这三个关键字表示创建的索引类型，它们分别表示唯一索引、全文索引、空间索引三种不同的索引类型。如果我们不指定任何关键字，则默认为普通索引。index_nameindex_name表示索引的名称，由用户自行定义，以便于以后对该索引进行修改等管理操作。index_typeindex_type表示索引的具体实现方式，在MySQL中，有两种不同形式的索引——BTREE索引和HASH索引。在存储引擎为MyISAM和InnoDB的表中只能使用BTREE，其默认值就是BTREE；在存储引擎为MEMORY或者HEAP的表中可以使用HASH和BTREE两种类型的索引，其默认值为HASH。index_colnameindex_col_name表示需要创建索引的字段名称，我们还可以针对多个字段创建复合索引，只需要在多个字段名称之间以英文逗号隔开即可。此外，对于CHAR或VARCHAR类型的字段，我们还可以只使用字段内容前面的一部分来创建索引，只需要在对应的字段名称后面加上形如(length)的指令即可，表示只需要使用字段内容前面的length个字符来创建索引。在这里，我们以customers表的cust_name字段(类型为VARCHAR(50))为例，使用cust_name字段的6个字符前缀来创建索引。 CREATE INDEX idx_cust_name ON user (cust_name(6));使用ALTER TABLE语法为： ALTER TABLE table_name ADD [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name (index_col_name,…) [USING index_type]4.2 删除索引删除指定表中指定名称的索引，语法为：ALTER TABLE table_nameDROP INDEX index_name;例如删除名称为idx_cust_name的索引，其SQL语句为：ALTER TABLE customersDROP INDEX idx_cust_name;4.3 修改索引在MySQL中并没有提供修改索引的直接指令，一般情况下，我们需要先删除掉原索引，再根据需要创建一个同名的索引，从而变相地实现修改索引操作。–先删除ALTER TABLE userDROP INDEX idx_user_username;–再以修改后的内容创建同名索引CREATE INDEX idx_cust_name ON customers (cust_name(8));4.4 查看索引在MySQL中，要查看某个数据库表中的索引也非常简单，只需要使用以下两个命令中的任意一种即可。–如果查看索引前，没有使用user db_name等命令指定具体的数据库，则必须加上FROM db_nameSHOW INDEX FROM table_name [FROM db_name]–如果查看索引前，没有使用user db_name等命令指定具体的数据库，则必须加上db_name.前缀SHOW INDEX FROM [db_name.]table_name5. 存储过程 什么是存储过程？存储过程简单来说，就是为了复用性或者实现复杂的业务功能，而保存的一条或多条MySQL语句的集合，可将其视为批文件； 为什么使用存储过程？（1）通过把处理封装在容易使用的单元中，简化复杂的操作；（2）由于不要求反复建立一系列处理步骤，这保证了数据的完整性，如果所有的开发人员和应用程序都使用同一存储过程，则所使用的代码都是相同的；（3）简化对变动的管理。如果表名、列名或业务逻辑有变化，只需要更改存储过程的代码，使用它的开发人员甚至不需要知道这些变化，也就是具备了安全性；（4）提高了性能，因为使用存储过程比单独使用SQL语句要快；（5）存储过程可用来编写功能更灵活的代码。因此，存储过程的具备三个特性:简单可复用、安全以及高性能； 存储过程的缺点？（1）存储过程编写比基本的SQL语句更加复杂，需要更高的技能；（2）可能没有创建存储过程的权限，数据库管理员可能会限制创建存储过程的权限，允许用户使用存储过程，而不允许用户自由创建存储过程；创建存储过程创建存储过程。如需要统计用户订单总金额，如果该用户需要交税的话，订单总金额则需要再加上税费 DELIMITER // CREATE PROCEDURE ordertotal( IN custid INT, IN taxable BOOLEAN, OUT ototal DECIMAL(8,2) )COMMENT ‘obtain total order price’ BEGIN /declare variable for total/ DECLARE total DECIMAL(8,2); DECLARE taxrate INT DEFAULT 6; /get the order total/ SELECT SUM(item_priceitem_quantity) INTO total FROM customers WHERE cust_id = custid; /is this taxable?/ IF taxable THEN SELECT total+(total/100taxrate) INTO total; END IF; SELECT total INTO ototal; END //有这样一些细节：1. 使用CREATE PROCEDURE语句进行创建，（）圆括号中为存储过程的参数，其中参数类型有：1. IN类型，表示传递给存储过程；2. OUT 类型，表示存储过程返回的结果，在调用存储过程时需要传入@开始的变量；3. INOUT类型，表示在存储过程中可以传入和传出；2. DECLARE用来声明一个变量，如这里的total，taxrate。注意MySQL中定义变量时都是变量名在前，数据类型在后。3. 存储过程具体逻辑写在BEGIN END之间；4. 将值赋给变量使用INTO关键字；5. 由于存储过程中每个SQL语句中用；作为分隔符，会和单个SQL造成冲突，因此可使用DELIMITER重新定义分类符，如该例子中定义//为分隔符，自然存储过程结尾就用END //结尾，而不再是END。同时，分隔符//成对出现后，恢复到默认的”;”作为分隔符；执行存储过程使用CALL子句执行存储过程，CALL子句接受存储过程的名称以及需要传递的参数。 CALL ordertotal(1,TRUE,@total); SELECT @total;如果存储过程中定义了OUT类型的输入参数，那么在执行存储过程时需要传入变量，如这里@total，并且变量都是用@开始的。如果存储过程中没有参数的话，就用空圆括号表示即可，CALL ordertotal()；删除存储过程删除存储过程，可以使用DROP PROCEDURE子句。如DROP PROCEDURE ordertotal；查询存储过程显示创建一个存储过程的语句，可以使用SHOW CREATE PROCEDURE。如SHOW CREATE PROCEDURE ordertotal；查询所有存储过程的状态，如果在定义存储过程中使用COMMENT添加注释，可以查看。同时可以LIKE进行过滤结果。如SHOW PROCEDURE STATUS LIKE ‘%order%’;6. 事务处理什么是事务？ 事务处理是用来维护数据库的完整性，它保证成批的MySQL操作要么完全执行，要么完全不执行。事务处理是一种机制，用来管理必须成批执行的MySQL操作，它们要么时作为整体执行或者完全不执行。关键概念：事务：是指一组SQL语句；回退：是指撤销指定的SQL语句的过程；提交：指将未存储的SQL语句的结果写入数据库表中；保留点：指事务处理中设置的临时占位符，可以对它发布回退；如何创建执行事务？ START TRANSACTION; INSERT INTO customers (cust_name,item_price,item_quantity) VALUES (‘1’,5,18); SELECT FROM customers; SAVEPOINT insertinto; INSERT INTO customers (cust_name,item_price,item_quantity) VALUES (‘2’,5,18); ROLLBACK TO insertinto;执行结果为：插入数据(‘1’,5,18)有效，因为，只会从保留点SAFEPOINT之后开始回退，也就是说保留点SAFEPOINT之前的SQL语句执行的结果仍然有效。有这样一些细节：STAET TRANSACTION用来表示下面的SQL语句集为一段事务；SAFEPOINT 用于指定保留点insertinto；ROLLBACK TO表示从指定保留点开=开始回退，也就是说保留点之前的SQL语句执行结果依然有效。如果仅仅使用ROLLBACK进行回退的话就表示从STAET TRANSACTION之后所有的SQL语句执行效果都会撤销；MySQL提交（写或保存）操作是自动进行的，这称之为隐含提交。但是在事务处理块中，提交不会隐含进行，要使用COMMIT子句进行提交。如： START TRANSACTION; INSERT INTO customers (cust_name,item_price,item_quantity) VALUES (‘1’,5,18); INSERT INTO customers (cust_name,item_price,item_quantity) VALUES (‘2’,5,18); COMMIT;采用COMMIT提交事务，如果两条SQL语句都执行成功，才会将数据都写入表中。7. 触发器什么是触发器？当某条SQL语句发生时，自动执行某些其他的SQL语句的时候就需要使用到触发器。触发器只能响应：DELETE，INSERT,UPDATE这三个特定操作。创建触发器？创建触发器时需要给出最重要的四条信息：1.全局唯一的触发器名；2.触发器关联的表；3.触发器在何时执行（操作执行之前或者之后）4.触发器应该响应的活动（DELETE, INSERT或者UPDATE）；由于触发器只能响应特定的三种类型的操作，因此可创建的触发器也就三种类型:INSERT触发器，DELETE触发器以及UPDATE触发器。INSERT触发器在执行INSERT触发器时，也这样几点需要注意：1.在INSERT触发器代码内，可以引用一个名为NEW的虚拟表，可以用NEW来访问刚插入的行数据；2.在BEFORE INSERT触发器中，NEW中的值可以被更新；3.对于AUTO_INCREMENT列，NEW在INSERT执行之前包含0.在INSERT执行之后包含新的自定生成值。创建一个INSERT触发器，每次插入一行数据，每次会返回当前插入的行数据的id。 /创建触发器/ CREATE TRIGGER insertcustomers AFTER INSERT ON customers FOR EACH ROW SELECT NEW.cust_id INTO @newinsertid; /执行触发器/ INSERT INTO customers (cust_name,item_price,item_quantity) VALUES (‘2’,5,18); SELECT @newinsertid;有这样一些细节： 使用CREATE TRIGGER来创建触发器； AFTER INSERT表明在插入行数据之后，触发器才会执行特征操作； FOR EACH ROW 表示对插入的每一行数据，触发器都起作用； 针对INSERT触发器，可以使用虚拟表NEW，来使用刚插入的行数据。比如例子中，SELECT NEW.cust_id INTO @newinsertid表示将新插入的行数据的id赋值给变量@newinsertid；DELETE触发器DELETE触发器在DELETE语句执行之前或者之后，需要知道以下两点： 在DELETE触发器代码内，可以引用一个名为OLD的虚拟表，来访问被删除的行； OLD表中的数据只能读，不能被更新，而在INSERT触发器中，就可以通过NEW来更新被插入的行数据；例如，针对customers表，当删除一行数据时，返回被删除数据的cust_id以及cust_name: /创建DELETE触发器/ DELIMITER // CREATE TRIGGER insertcustomers AFTER DELETE ON customers FOR EACH ROW BEGIN SELECT OLD.cust_name INTO @deletecustname; SELECT OLD.cust_id INTO @deletecustid; END // /调用DELETE触发器/ DELETE FROM customers WHERE cust_id = 3; SELECT @deletecustname; SELECT @deletecustid;基本上与创建INSERT触发器一样，只不过在DELETE触发器中只能使用OLD来访问被删除的行数据。UPDATE触发器UPDATE触发器在UPDATE语句执行之前或者之后执行，需要知道一下几点： 在BEFORE UPDATE触发器中可以使用NEW和OLD来访问数据，而在AFTER UPDATE触发器中使用NEW来访问数据会报错，只能使用OLD来访问数据； 在BEFORE UPDATE触发器中，NEW中的值可以被改变，即允许更改将用于UPDATE的数据； OLD中的行数据只能读，不能被更新；一个UPDATE触发器示例如下： /创建UPDATE触发器/ DELIMITER // CREATE TRIGGER insertcustomers BEFORE UPDATE ON customers FOR EACH ROW BEGIN SELECT NEW.cust_name INTO @beforeupdate; SET NEW.cust_name = ‘reset_name’; SELECT OLD.cust_name INTO @afterupdate; END // /调用UPDATE触发器*/ UPDATE customers SET cust_name = ‘happy’ WHERE cust_id = 5; SELECT @beforeupdate; SELECT @afterupdate;输出为@beforeupdate为‘happay’，而@afterupdate为’reset_name’。有这样一些细节： NEW虚拟表中的数据可以更改，如这里采用 SET NEW.cust_name = ‘reset_name’;，将待更新的cust_name由“happy”变成了“reset_name”； 在BEFORE UPDATE触发器中可以使用NEW和OLD来访问数据，而在AFTER UPDATE触发器中使用NEW来访问数据会报错；删除触发器？ 删除触发器，可以使用 DROP TRIGGER语句，比如DROP TRIGGER insertcustomers;。触发器不能更新或者覆盖，如果要修改触发器，必须删除这个触发器。]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDEA创建web]]></title>
    <url>%2F2018%2F04%2F29%2FIDEA%E5%88%9B%E5%BB%BAweb%2F</url>
    <content type="text"><![CDATA[New Project 新建maven项目，勾选create from archetype，选择maven-archetype-webapp Next，填写GroupId，ArtifactId和Version(默认) Next，这里在Properties中添加一个参数archetypeCatalog=internal，不加这个参数，在maven生成骨架的时候将会非常慢，有时候会直接卡住。 来自网上的解释： archetypeCatalog表示插件使用的archetype元数据，不加这个参数时默认为remote，local，即中央仓库archetype元数据，由于中央仓库的archetype太多了，所以导致很慢，指定internal来表示仅使用内部元数据。 Next，填写项目名称和module名称(默认)。 点击Finish。 点击Enable Auto-Import(自动导入包) 项目的目录结构如下：]]></content>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo常用指令]]></title>
    <url>%2F2018%2F04%2F29%2FHexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[常用指令 init$ hexo init [folder]新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。 new$ hexo new [layout] [title]新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 generate$ hexo generate生成静态文件。该命令可以简写为$ hexo g publish$ hexo publish [layout] [filename]发表草稿。 server$ hexo server启动服务器。默认情况下，访问网址为： http://localhost:4000/。-p, –port 重设端口$ hexo server -p 8088访问网址为： http://localhost:8088/。 deploy$ hexo deploy部署网站。该命令可以简写为：$ hexo d render$ hexo render [file1] [file2] …渲染文件。 migrate$ hexo migrate [type]从其他博客系统 迁移内容。 clean$ hexo clean清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。 list$ hexo list [type]列出网站资料。 version$ hexo version显示 Hexo 版本。]]></content>
      <categories>
        <category>Testing</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
